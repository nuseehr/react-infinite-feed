{"version":3,"sources":["components/Feed.js","components/App.js","serviceWorker.js","index.js"],"names":["Feed","state","isScrap","visible","_markScrap","_this","props","scrapNum","selectedFeeds","length","setState","_handleScrap","scrapPhoto","_handleVisibleChange","setTimeout","this","react_default","a","createElement","col","sm","md","lg","style","position","className","src","profile_image_url","alt","nickname","image_url","popover","content","trigger","onVisibleChange","badge","count","backgroundColor","es_button","shape","icon","ghost","onClick","Component","Content","Layout","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","_getFeeds","_ref","asyncToGenerator","regenerator_default","mark","_callee","pageNum","feeds","savedFeeds","saved","wrap","_context","prev","next","_callApi","sent","JSON","parse","localStorage","getItem","map","sf","idx","findIndex","f","id","concat","toConsumableArray","stop","_x","apply","arguments","fetch","then","res","json","catch","err","console","log","_renderFeeds","param","feed","src_components_Feed","key","_checkScrap","_handleScrapFeeds","undefined","_ref2","_callee2","isSelected","selected","_context2","_addSavedFeeds","filter","_removeSavedFeeds","_x2","_x3","isFirst","setItem","stringify","push","_infiniteScroll","Math","max","document","documentElement","scrollHeight","body","scrollTop","clientHeight","pages","_onSwitch","checked","scrapSwitch","window","addEventListener","layout","padding","row","margin","es_switch","defaultChecked","gutter","spin","tip","size","Boolean","location","hostname","match","ReactDOM","render","src_components_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0f462f0c.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Feed.css';\nimport { Col, Button, Badge, Popover } from 'antd';\n\nclass Feed extends Component {\n\n  state = {\n    isScrap: 0,\n    visible: false\n  };\n\n  componentWillMount() {\n    this._markScrap()\n  }\n\n  _markScrap= () => {\n    if(this.props.scrapNum < this.props.selectedFeeds.length) {\n      this.setState({\n        isScrap: this.props.scrapNum+1\n      })\n    }\n  }\n\n  _handleScrap = () => {\n    if(this.state.isScrap >= 1) {\n      this.setState({\n        isScrap: 0\n      })\n      this.props.scrapPhoto(-1, this.props)\n    }\n\n    else {\n      this.setState({\n        isScrap: this.props.scrapNum + 1,\n      })\n      this.props.scrapPhoto(1, this.props)\n    }\n  }\n\n  _handleVisibleChange = (visible) => {\n    this.setState({ visible });\n    setTimeout(() => {\n      this.setState({ \n        visible: false\n      });\n    }, 1000);\n  }\n\n  render() {\n    return (\n      <Col sm={12} md={8} lg={6} style={{ position: 'relative' }} >\n        <img className=\"Profile\" src={this.props.profile_image_url} alt={this.props.nickname} />\n        <span className=\"UserName\"> {this.props.nickname} </span>\n        <img className=\"Photo\" src={this.props.image_url} alt={this.props.nickname} />\n        <Popover\n        content=\"Scrap!\"\n        trigger=\"click\"\n        visible={this.state.visible}\n        onVisibleChange={this._handleVisibleChange}\n        >\n          <Badge count={this.state.isScrap} style={{ backgroundColor: '#FECE32' }} >\n            <Button \n              shape=\"circle\" \n              icon=\"heart-o\" \n              ghost\n              onClick={this._handleScrap}\n              >\n            </Button>\n          </Badge>\n        </Popover>\n      </Col>\n    );\n  }\n}\n  \n  export default Feed;\n","import React, { Component } from \"react\";\nimport Feed from \"./Feed\";\n\nimport './App.css';\nimport { Layout, Row, Switch, Spin } from 'antd';\n\nconst { Content } = Layout;\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      feeds: [],\n      selectedFeeds: [],\n      pages: 1,\n      scrapNum: 0,\n      scrapSwitch: false\n    };\n  }\n\n  componentDidMount() {\n    this._getFeeds(this.state.pages);\n    window.addEventListener('scroll', this._infiniteScroll, true);\n  }\n\n  _getFeeds = async (pageNum) => {\n    const feeds = await this._callApi(pageNum);\n    const savedFeeds = JSON.parse(localStorage.getItem('scrapped'))\n\n    if(savedFeeds !== null && savedFeeds.length !== 0) {\n      const saved = savedFeeds.map(sf => {\n        const idx = feeds.findIndex(f => f.id === sf.id)\n        if(idx >= 0) feeds[idx] = sf\n        else return sf\n        return sf\n      })\n\n      this.setState({\n        feeds: [...this.state.feeds, ...feeds],\n        selectedFeeds: saved,\n        scrapNum: saved[savedFeeds.length-1].scrapNum+1\n      })\n    }\n\n    else {\n      this.setState({\n        feeds: [...this.state.feeds, ...feeds]\n      })\n    }\n  }\n\n  _callApi = (pageNum) => {\n    const proxyurl = 'https://cors-anywhere.herokuapp.com/';\n    const url = 'https://s3.ap-northeast-2.amazonaws.com/bucketplace-coding-test/cards/page_' + pageNum + '.json'; \n    return fetch(proxyurl + url)\n    .then(res => res.json())\n    .then(json => json)\n    .catch( err => console.log(err));\n  }\n\n  _renderFeeds = (param) => {\n    const feeds = param.map(feed => {\n      return (\n      <Feed\n        image_url={feed.image_url}\n        profile_image_url={feed.profile_image_url}\n        nickname={feed.nickname}\n        key={feed.id}\n        id={feed.id}\n        scrapNum={this._checkScrap(feed)}\n        scrapPhoto={this._handleScrapFeeds}\n        selectedFeeds={this.state.selectedFeeds}\n      />\n      );\n    });\n    \n    return feeds;\n  }\n  \n  _checkScrap = (feed) => {\n    if(feed.scrapNum !== undefined) return feed.scrapNum\n\n    else return this.state.scrapNum\n  }\n\n  _handleScrapFeeds = async (isSelected, selected) => {\n    if(isSelected === 1) {\n      await this.setState({\n        scrapNum: this.state.scrapNum + isSelected,\n        selectedFeeds: [...this.state.selectedFeeds, selected]\n      })\n\n      this._addSavedFeeds(this.state.selectedFeeds.length, selected) \n    }\n\n    else if(isSelected === -1){\n      await this.setState({\n        scrapNum: this.state.scrapNum + isSelected,\n        selectedFeeds: this.state.selectedFeeds.filter(f => f.id !== selected.id)\n      })\n\n      this._removeSavedFeeds(selected) \n    }\n  }\n \n  _addSavedFeeds = (isFirst, selected) => {\n    if(isFirst === 1) {\n      const savedFeeds = [ selected ]\n      \n      localStorage.setItem('scrapped', JSON.stringify(savedFeeds));\n    }\n    \n    else {\n      const savedFeeds = JSON.parse(localStorage.getItem('scrapped'))\n      savedFeeds.push(selected)\n      localStorage.setItem('scrapped', JSON.stringify(savedFeeds));\n    }\n\n  }\n\n  _removeSavedFeeds = () => {\n    const savedFeeds = this.state.selectedFeeds\n    localStorage.setItem('scrapped', JSON.stringify(savedFeeds));\n  }\n\n  _infiniteScroll = () => {\n    const scrollHeight = Math.max(document.documentElement.scrollHeight, document.body.scrollHeight);\n    const scrollTop = Math.max(document.documentElement.scrollTop, document.body.scrollTop);\n    const clientHeight = document.documentElement.clientHeight;\n    if(scrollHeight - (scrollTop + clientHeight) < 1) {\n      this.setState({\n        pages: this.state.pages+1\n      })\n      this._getFeeds(this.state.pages);\n    }\n  }\n\n  _onSwitch = (checked) => {\n    this.setState({\n      scrapSwitch: checked\n    })    \n    \n  }\n\n  render() {\n    return (\n      <Layout>\n        <Content style={{ padding: '10% 10%' }}>\n          <Row style={{ margin: '0% 0% 3% 0%' }}>\n            <Switch \n              defaultChecked={false} \n              onClick={this._onSwitch}\n              style={{ margin: '0% 1% 0% 0%' }}\n              />\n            <span>스크랩한 것만 보기 </span>\n          </Row>\n          <Row gutter={24}>\n            {this.state.feeds.length ? \n              (this.state.scrapSwitch ? this._renderFeeds(this.state.selectedFeeds): this._renderFeeds(this.state.feeds))\n              :<Spin \n                tip=\"Loading...\"\n                size=\"large\"\n                style={{ margin: '30% 50%' }}/>\n            }\n          </Row>\n        </Content>\n      </Layout>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import App from './components/App';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}